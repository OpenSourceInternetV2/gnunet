#!/bin/sh

set -e

. /usr/share/debconf/confmodule

case "${1}" in
	configure)
		db_version 2.0

		db_get gnunet-server/gnunet_user
		gnunet_user="${RET}"

		db_get gnunet-server/gnunet_group
		gnunet_group="${RET}"

		db_get gnunet-server/launch_at_startup
		launch_at_startup="${RET}"

		db_stop

		# Read default values
		CONFIG_FILE="/etc/default/gnunet-server"

		GNUNETD_HOME="`gnunet-update --get=PATHS:GNUNETD_HOME`" || true

		if [ ! -d "${GNUNETD_HOME}" ]
		then
			echo -n "Updating /etc/gnunetd.conf with new [PATHS] mandatory section: "

			# Using default value
			GNUNETD_HOME="/var/lib/gnunet"

			CONFIG_NEW="`/bin/tempfile`"

cat > "${CONFIG_NEW}" << EOF
[PATHS]
GNUNETD_HOME = ${GNUNETD_HOME}

EOF

			sed '/^GNUNETD_HOME/d' /etc/gnunetd.conf >> "${CONFIG_NEW}"
			mv -f /etc/gnunetd.conf /etc/gnunetd.conf.bak
			cp -f "${CONFIG_NEW}" /etc/gnunetd.conf
			rm -f "${CONFIG_NEW}"
			chmod 644 /etc/gnunetd.conf

			echo "done."
		fi

		# Creating gnunet group if needed
		if ! getent group ${gnunet_group} > /dev/null
		then
			echo -n "Creating new GNUnet group ${gnunet_group}: "
			addgroup --quiet --system ${gnunet_group}
			echo "done."
		fi

		# Creating gnunet user if needed
		if ! getent passwd $gnunet_user > /dev/null
		then
			echo -n "Creating new GNUnet user ${gnunet_user}: "
			adduser --quiet --system --ingroup ${gnunet_group} --no-create-home ${gnunet_user}
			echo "done."
		fi

		# Update files and directories permissions.
		# Assuming default values, this *should* not be changed.
		echo -n "Updating files and directories permissions: "
		chown -R ${gnunet_user}:${gnunet_group} /var/run/gnunetd
		chown -R ${gnunet_user}:${gnunet_group} /var/log/gnunetd
		# Use the new "gnunet-update -g"
		if [ -z "${GNUNETD_HOME}" ]
		then
			GNUNETD_HOME=`gnunet-update --get=GNUNETD:GNUNETD_HOME`
		fi
		chown -R ${gnunet_user}:${gnunet_group} ${GNUNETD_HOME}
		echo  "done."

		# Writing new values to configuration file
		echo -n "Writing new configuration file: "
		CONFIG_NEW=`/bin/tempfile`

cat > "${CONFIG_NEW}" <<EOF
# This file controls the behaviour of the GNUnet init script.
# It will be parsed as a shell script.
# please do not edit by hand, use 'dpkg-reconfigure gnunet-server'.

GNUNET_USER=${gnunet_user}
GNUNET_GROUP=${gnunet_group}
EOF

		cp -f "${CONFIG_NEW}" "${CONFIG_FILE}"
		echo "done."

		# Secure access to the data directory
		chmod 0700 "${GNUNETD_HOME}" || true

		# This is need to migrate data from 0.6.1b or later
		echo -n "Migrating previous GNUnet data (gnunet-update): "
		gnunet-update || true
		echo "done."

		# Cleaning
		rm -f "${CONFIG_NEW}"
		echo "All done."

		if [ "${launch_at_startup}" = "true" ]
		then
			if [ -x /etc/init.d/gnunet-server ]
			then
				update-rc.d gnunet-server defaults > /dev/null 2>&1 || true

				if [ -x /usr/sbin/invoke-rc.d ]
				then
					invoke-rc.d gnunet-server start || true
				else
					/etc/init.d/gnunet-server start || true
				fi
			fi
		else
			if [ -x /etc/init.d/gnunet-server ]
			then
				if [ -x /usr/sbin/invoke-rc.d ]
				then
					invoke-rc.d gnunet-server stop || true
				else
					/etc/init.d/gnunet-server stop || true
				fi
			fi

			update-rc.d -f gnunet-server remove > /dev/null 2>&1 || true
		fi
		;;

	abort-upgrade|abort-remove|abort-deconfigure)

		;;

	*)
		echo "postinst called with unknown argument \`${1}'" >&2
		exit 1
		;;
esac

#DEBHELPER#

exit 0
